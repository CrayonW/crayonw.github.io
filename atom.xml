<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crayon Personal Blog site</title>
  
  <subtitle>专注分享计算机技术与行业动态，欢迎关注！</subtitle>
  <link href="https://crayon.github.io/atom.xml" rel="self"/>
  
  <link href="https://crayon.github.io/"/>
  <updated>2025-06-04T05:42:28.000Z</updated>
  <id>https://crayon.github.io/</id>
  
  <author>
    <name>wangjun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器硬件扫盲</title>
    <link href="https://crayon.github.io/2025/06/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E6%89%AB%E7%9B%B2/"/>
    <id>https://crayon.github.io/2025/06/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6%E6%89%AB%E7%9B%B2/</id>
    <published>2025-06-04T05:42:28.000Z</published>
    <updated>2025-06-04T05:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器硬件扫盲"><a href="#服务器硬件扫盲" class="headerlink" title="服务器硬件扫盲"></a>服务器硬件扫盲</h1><h2 id="一、服务器介绍"><a href="#一、服务器介绍" class="headerlink" title="一、服务器介绍"></a>一、服务器介绍</h2><blockquote><p>目前国内服务器发展受到美国的制裁，在当下这个时间节点下国内的服务器厂商都在全面国产化的道路上奋斗，已经有了显著的成效，国产化服务器在各行各业投入使用，各类新型技术像云计算，大模型等也已经部署在国产服务器上，如今的数据中心国产化的服务器占有率也在不断上升，我们需要对服务器硬件有更加清晰的认识，正视技术之间的差距，不断提升自身的技术能力，没有什么是不能超越的。</p></blockquote><h3 id="服务器爆炸图"><a href="#服务器爆炸图" class="headerlink" title="服务器爆炸图"></a>服务器爆炸图</h3><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/Cb4ubBLolozWPexK253cf6uqnmb.png" src-width="846" src-height="852" align="center"/><ol><li>机箱上盖，拆解时需要使用十字螺丝刀解锁进行开箱</li><li><u>OCP</u>导风罩，辅助对OCP网卡进行散热</li><li>PSU导风罩，挡住前端CPU散热的废气，PSU内部有自己的散热风扇</li><li>导风罩，扣住整个服务器主要发热部件CPU和内存，来进行风道的控制</li><li>散热器与CPU，对CPU进行散热，拆卸时使用T30的螺丝刀，需要特别</li><li>内存，都是采用双通道的设计</li><li>风扇，采用六风扇组，每个风扇内有前后两片扇叶</li><li>PCIE卡，可以是网卡，raid卡，ib卡等一些扩展卡</li><li>电源，采用双PSU电源设计</li><li>2.5寸硬盘</li><li>3.5寸硬盘</li><li>3.5寸硬盘</li><li>机箱</li><li>3.5寸硬盘</li></ol><h3 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h3><blockquote><p>想要了解更加详细的分类可以参看服务器厂商的官网，如：<a href="https://www.nettrix.com.cn/%EF%BC%8Chttps://www.inspur.com/lcjtww/2521494/zx-server-p/index.html%EF%BC%9B%E5%85%B6%E4%B8%AD%E4%BC%9A%E5%AF%B9%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D">https://www.nettrix.com.cn/，https://www.inspur.com/lcjtww/2521494/zx-server-p/index.html；其中会对各种类型服务器有详细介绍</a></p></blockquote><p>按照<u>U位</u>（高度）分类：2U服务器，4U服务器，6U服务器，8U服务器；</p><p>按照外形分类：机架式服务器，塔式服务器，刀片式服务器，高密度服务器；</p><p>按照功能分类：计算服务器，存储服务器，数据库服务器，负载均衡服务器等（这个可以参考云平台部署使用到的服务器）；</p><p>按照架构分类：<u>x86架构</u>服务器，arm架构服务器，RISC架构服务器等（目前主流的服务器是x86，arm服务器比例也在不断上涨）</p><h3 id="核心组成部件"><a href="#核心组成部件" class="headerlink" title="核心组成部件"></a>核心组成部件</h3><p>Cpu：品牌有Intel，AMD，国产海光，龙芯，鲲鹏等，需要关注的参数有核心数量，主频，TDP功耗，PCH芯片，内存通道数，支持内存速度，UPI连接速度，PCIE I&#x2F;O数量以支持多少<u>lanes</u>表示</p><blockquote><p>详细CPU信息可以搜索对应官网文档进行查看</p></blockquote><p>内存：品牌有三星，海力士，关注的参数有品牌，型号，类型，容量大小，速度，内存颗粒，内存结构</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/LUi2bFFxaoQ3i5xGuZBcCmManbh.png" src-width="554" src-height="541" align="center"/><blockquote><p>数据的临时仓库；计算机中所有的程序运行都在内存中进行，内存对计算机的性能影响非常大；内存的作用用于暂时存放CPU中的运算数据，以及硬盘，网卡等外部存储器交换数据，掉电即丢数据。</p></blockquote><p>硬盘：希捷，西数，恺侠，三星，Intel等，使用上关心容量大小与读写类型，参考图片</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/IPHkbTZCHokqykxWiDocrZMWn2c.png" src-width="827" src-height="489" align="center"/><blockquote><p>NVMe协议是一个针对基于PCIE的固态硬盘高性能、可扩展的主机控制器接口；NVMe协议支持M.2、U.2、AIC接口，但不能说这些接口的SSD就是nvme硬盘</p></blockquote><p>PSU：长城，冗余电源与单电源，冗余电源支持热插拔，主要参数是功率与类型（交流、直流，高压直流）</p><p>网卡：主要参数：速率（百兆、千兆、万兆），网络数量（2&#x2F;4）、接口类型（电口、光口）（TODO：光模块）</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/QeSxbjJ5ioJC7oxHPPlcz1XEnsb.png" src-width="943" src-height="360" align="center"/><h2 id="二、-服务器外部设计"><a href="#二、-服务器外部设计" class="headerlink" title="二、 服务器外部设计"></a>二、 服务器外部设计</h2><h3 id="通用机架服务器"><a href="#通用机架服务器" class="headerlink" title="通用机架服务器"></a>通用机架服务器</h3><blockquote><p>采用的是2U的设计，双路的双CPU主板结构，不错的CPU和内存配置，支持多种规格的硬盘盘位的形态（12盘位，24盘位），服务器后背支持多个不同pcie扩展，满足不同客户硬件配置要求</p></blockquote><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/UDKFbIlGmoAEjax5NOZca9Aenob.png" src-width="802" src-height="151" align="center"/><p>1–&gt; 电源键；2–&gt;ID按键（用于服务器定位与识别）；3–&gt;TypeC接口（用于厂商人员debug）；4–&gt;USB接口（用于连接键盘，鼠标，u盘等设备）；5–&gt;导轨锁扣（用于把服务器固定在机柜上）</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/JZNAbraIuoKxFsxHXfTcGr3tngd.png" src-width="652" src-height="161" align="center"/><p>1–&gt;OCP（板载网卡）；2–&gt;VGA接口（用于连接显示器）；3–&gt;USB接口（同上）；4–&gt;管理网口（用于登录BMC通过远程web网页管理和监控服务器硬件状态）；5–&gt;电源；6–&gt;后置扩展HDD（也可以换成其他PCIE卡）；</p><p>各个厂商的服务器差异主要在于对于主板的设计能力，服务器里的可用空间已经很确定，一般不同家的PCIE扩展数量，以及支持硬盘数量可能存在差异，目前相对于服务器厂商更多的是考验研发能力，供货能力以及后期的技术维保能力。</p><p>由于现在大模型的火热，市场对于GPU服务器的需求量增大，GPU服务器相对于传统的2U服务器设计更加复杂，机器的交付和售后维修难度加大，推荐重点关注GPU服务器机型的发展变化。</p><h2 id="三、服务器主板解析"><a href="#三、服务器主板解析" class="headerlink" title="三、服务器主板解析"></a>三、服务器主板解析</h2><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/Cqt8bZfIdoAQ7KxncIqc89kanUe.png" src-width="1216" src-height="834" align="center"/><p>这是Intel CPU服务器主板的架构图，双CPU通过UPI实现高速互联，每个CPU支持8通多，通过cpu内部集成的IMC内存控制器连接，南桥芯片PCH管理芯片，管理低速外设（USB、SATA、SPI等，BMC芯片也是挂载在下面），一级一些silmx接口连接pcie设备，大部分是直接挂载在CPU下的。</p><p>BMC芯片型号AST2600，负责带外管理（IPMI、KVM-over-IP），其中集成了存储（FLASH&#x2F;EMMC）、网络（RTL8211以太控制器）等管理功能。</p><h2 id="四、服务器扩展知识学习"><a href="#四、服务器扩展知识学习" class="headerlink" title="四、服务器扩展知识学习"></a>四、服务器扩展知识学习</h2><blockquote><p>想要深入了解服务器相关知识，可以从GPU服务器基础硬件开始，现在GPU服务器的硬件结构更加复杂，简单分成两层，一层是主板层可以参考2U服务器的设计实现，一层是GPU层相对没有主板层硬件设计复杂，在了解了服务器硬件的基本设计，需要学习linux系统将硬件与软件的关系对应起来，认识服务器在日常使用和维护中需要怎么通过各类手段来进行故障排查，以及问题分析</p></blockquote><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/HaYQbzfGfo3RsuxI7Kqcanvxnle.png" src-width="630" src-height="554" align="center"/><p>GPU服务器，由于CPU本身的PCIE通道数存在数量限制，而GPU在实际运算的过程中更多的是GPU与GPU之间沟通数据，英伟达设计使用了交换芯片来扩展服务器支持的PCIE设备数量，且能提高GPU与GPU之间的数据速率。目前GPU服务器的性能更多的是由于大量GPU集群之间数据交换的速率受限导致的，英伟达的核心</p><div class="callout callout-bg-2 callout-border-2"><div class='callout-emoji'></div><p>名词解释</p><ol><li><p><em>U位（unit的简称），在数据中心机柜内是一种表示服务器外部尺寸的单位，由美国电子工业协会（EIA）规定服务器的宽（48.26cm＝19英寸）与高（4.445cm的倍数）；由于宽为19英寸，所以有时也将满足这一规定的机架称为“19英寸机架”，厚度以4.445cm为基本单位；1U是4.445cm，2U则是1U的2倍（4.445*2=8.89cm），以此类推。</em></p></li><li><p><em>X86架构是一种微处理器执行的计算机指令集，也是intel公司的一个通用计算机系列的标准编号缩写标识，它提供了一套通用的计算机指令集合，可以用来实现复杂的计算任务。ARM，RISC也类似主要是CPU设计的一种指令标准，详细可以进行搜索了解。</em></p></li><li><p><em>OCP 网卡采用专用的 OCP 接口（Open Compute Project Mezzanine Card），常见形态为夹层卡（Mezzanine Card），可直接插入服务器主板的 OCP 插槽，相比传统 PCIe 网卡更节省空间，且支持热插拔。</em></p></li><li><p><em>lane 在 PCIe（Peripheral Component Interconnect Express）总线中，Lane（通道）是最基本的物理传输单元，类似于高速公路上的独立车道。每个 Lane 负责双向串行数据传输，多个 Lane 可并联组成更高带宽的传输通道（如 x1、x4、x8、x16 等）。</em></p></li></ol></div>]]></content>
    
    
    <summary type="html">本文系统讲解服务器硬件的基础与核心知识，涵盖服务器基本介绍（爆炸图解析、分类标准）、核心组成部件（CPU/内存/硬盘/PSU/网卡的参数与功能）、外部设计（机架式服务器接口与扩展）、主板架构（双CPU互联、BMC管理芯片）及扩展知识（GPU服务器设计难点、硬件与软件关联），并附U位、x86架构、OCP网卡等关键术语解释，是服务器硬件入门的综合性扫盲手册。</summary>
    
    
    
    <category term="服务器硬件" scheme="https://crayon.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="服务器硬件" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="服务器部件" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E4%BB%B6/"/>
    
    <category term="服务器分类" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%86%E7%B1%BB/"/>
    
    <category term="U位" scheme="https://crayon.github.io/tags/U%E4%BD%8D/"/>
    
    <category term="x86架构" scheme="https://crayon.github.io/tags/x86%E6%9E%B6%E6%9E%84/"/>
    
    <category term="GPU服务器" scheme="https://crayon.github.io/tags/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>服务器内存知识手册</title>
    <link href="https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"/>
    <id>https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/</id>
    <published>2025-05-30T03:31:00.000Z</published>
    <updated>2025-05-30T03:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器内存知识手册"><a href="#服务器内存知识手册" class="headerlink" title="服务器内存知识手册"></a>服务器内存知识手册</h1><p>cpu使用到的内存都必须读入到内存中才能利用，动态随机存取内存Dynamic Random Access Memory,DRAM断电数据就会消失</p><p>DDR：双倍数据传输速度Double Data Rate，可在一次工作周期中进行两次数据的传输</p><p>HBM：高带宽内存High Bankwidth Memory</p><p>多通道：数据是同步写入&#x2F;读出一对内存中，同通道的内存需要完全一致</p><p>SRAM：静态随机存取内存Static Random Access Memory, SRAM用于CPU的L2缓存存在CPU内部</p><p>ROM：只读存储器</p><p>EEPROM&#x2F;FLASH：目前主板BIOS使用的存储件</p><p>FSB：Front Side Bus前端总线速度，cpu中内存控制芯片与内存间的传输速度</p><h2 id="内存发展历程"><a href="#内存发展历程" class="headerlink" title="内存发展历程"></a>内存发展历程</h2><h3 id="HBM发展历程"><a href="#HBM发展历程" class="headerlink" title="HBM发展历程"></a>HBM发展历程</h3><p>2013 年AMD与Skhynix宣布合作开发HBM技术→2015年HBM技术的开端，当时带宽1.0Gbps，容量为2Gb→2018容量提升至8Gb，带宽升至2.4Gbps。它是世界上发展最快的版本，相比前代，每芯片容量翻倍、带宽提升 1.5 倍，热阻也提升了 34%。→2020年容量和带宽达到 16Gb 和 3.2Gbps。其在速度和容量上均有显著增强→2022年带宽提升至 5.6Gbps，SK 海力士实现了全球首次量产。该技术具备 1.5 倍的容量提升、1.8 倍的带宽提升、1.2Hi 连接，还采用了芯片上芯片（On-Die）、先进电源管理（通过 Temp.管理）等技术。→2024年容量达到 24Gb，带宽高达 8.0Gbps。其每芯片容量提升 1.5 倍，带宽提升 1.4 倍，并且热阻改善了 10%，能效达到 0.9x（pJ&#x2F;bit）。→2026年计划在 2026 年推出 HBM4 技术，将在 JEDEC 标准下进行讨论，采用混合键合技术以及逻辑晶圆厂生产。</p><h2 id="内存硬件组成"><a href="#内存硬件组成" class="headerlink" title="内存硬件组成"></a>内存硬件组成</h2><p>从大到小：channel&gt;DIMM&gt;rank&gt;chip&gt;bank&gt;row&#x2F;column</p><p>每个channel可以插两个DIMM，每个DIMM由两个rank构成，8个chip组成一个rank</p><p>内存物理表面小芯片chip，组成一组RANK</p><p>程序中使用的Virtual Memory Address，硬件里的空间是Physical Memory Address</p><p>CPU会通过内存管理单元MMU，将虚拟地址转化位实际的物理地址</p><p>SPD芯片：Serial Presence Detect存储内存参数（容量、频率、时序等），主板通过I2C总线读取，自动配置最佳运行状态</p><h2 id="内存技术特性"><a href="#内存技术特性" class="headerlink" title="内存技术特性"></a>内存技术特性</h2><p>单颗粒密度：制程从90nm到10nm以下，单Die容量持续提升，3D堆叠（HBM专属）通过TSV技术垂直堆叠4-16层Die</p><p>错误校验：ECC，Error-Correcting Code</p><p>封装技术：FBGA（球栅阵列），3D堆叠封装</p><p>Bank Group：DDR5专属，将内存Bank划分为多个Group（如4个Group，每组16个Bank），支持独立访问，并行处理不同Bank的数据，提升并发效率（较DDR4提升30%随机访问性能）</p><p>性能影响：带宽与延迟，容量与密度，功耗与发热，可靠性</p><h2 id="内存性能优化策略"><a href="#内存性能优化策略" class="headerlink" title="内存性能优化策略"></a>内存性能优化策略</h2><p>硬件配置优化：通道配置，容量平衡，频率同步</p><p>系统级优化：NUMA架构，大页内存，内存绑定</p><h2 id="监控工具"><a href="#监控工具" class="headerlink" title="监控工具"></a>监控工具</h2><p>显示内存相关的DMI信息，包括内存插槽数量、已使用插槽、内存类型、容量、速度等<code>dmidecode -t memory</code></p><p>用于测试内存稳定性的工具，通过内存进行一系列的读写测试<code>memtester 1024M 2</code></p><p>用于监控和显示NUMA，Non-Uniform Memory Access，非统一内存访问，系统中内存的使用情况<code>watch -n 2 numastat</code></p><h2 id="内存性能测试工具"><a href="#内存性能测试工具" class="headerlink" title="内存性能测试工具"></a>内存性能测试工具</h2><ul><li>带宽测试：AIDA64 Memory Benchmark（测读写 &#x2F; 复制带宽）、MemTest86（稳定性测试）。</li><li>延迟测试：LatencyMon（测系统内存延迟分布）、Intel Memory Latency Checker（精确测量访问延迟）。</li><li>CPU PMU（性能监控单元）查看内存访问次数、缓存未命中数（如 Linux <code>perf</code>工具）。</li><li>Windows 资源监视器：观察 “内存利用率”“硬错误”（页面调度次数，高值表示内存不足）</li></ul><h2 id="内存管理与维护"><a href="#内存管理与维护" class="headerlink" title="内存管理与维护"></a>内存管理与维护</h2><p>生命周期管理：容量规划，固件升级，兼容性验证</p><p>运维实践：热插拔操作，故障隔离，数据备份（虚拟环境）</p><p>云原生管理：Kubernetes内存Qos，内存超配，容器内存限制</p><h2 id="内存相关故障诊断与排错"><a href="#内存相关故障诊断与排错" class="headerlink" title="内存相关故障诊断与排错"></a>内存相关故障诊断与排错</h2><p>常见故障现象：内存泄漏，ECC错误，兼容性问题</p><p>诊断流程<br>硬件层：内存测试工具<a href="https://www.memtest86.com/">Memtest86+</a>，Windows Memory Diagnostic<br>系统层：内核日志分析dmesg | grep -i memory，EDAC软件检测<br>应用层：性能分析jprofiler、gperftools<br>典型案例<br>数据库服务器内存使用率异常-优化InnoDB缓冲池大小<br>虚拟化节点内存不足-启用气球驱动回收内存</p><h2 id="内存技术发展趋势"><a href="#内存技术发展趋势" class="headerlink" title="内存技术发展趋势"></a>内存技术发展趋势</h2><p>硬件创新：HBM3，MRAM，3D XPoint</p><p>架构演进：内存池化，内存计算，存算一体</p><p>行业动态：DDR5普及，AI内存需求，绿色计算</p><p>行业标准：<a href="https://www.jedec.org/standards-documents/docs/jesd79-5b">JEDEC DDR5规范（JESD79-5B）</a>，CXL 3.0协议文档</p><p>内存报错定位参考<a href="HFBDdiZxFoxR3txC8IKcCinFnxf">167 - 福州, 宜春系统下内存报错定位参考</a></p><p>numa技术<a href="http://mp.weixin.qq.com/s?__biz=MzU3ODg3MDIwOA==&mid=2247485483&idx=1&sn=affd867dc0ada2aa45ff30c208e9ec7b&chksm=fd6f8684ca180f92de56580ede4561f47a6833d04d581ae68932c76413106e17172618683c6d&mpshare=1&scene=24&srcid=0917XcSIl0oZbeI7dUZxwuIA&sharer_shareinfo=3b5032b6ca0f7a453e492043efb692b3&sharer_shareinfo_first=3b5032b6ca0f7a453e492043efb692b3#rd">http://mp.weixin.qq.com/s?__biz=MzU3ODg3MDIwOA==&amp;mid=2247485483&amp;idx=1&amp;sn=affd867dc0ada2aa45ff30c208e9ec7b&amp;chksm=fd6f8684ca180f92de56580ede4561f47a6833d04d581ae68932c76413106e17172618683c6d&amp;mpshare=1&amp;scene=24&amp;srcid=0917XcSIl0oZbeI7dUZxwuIA&amp;sharer_shareinfo=3b5032b6ca0f7a453e492043efb692b3&amp;sharer_shareinfo_first=3b5032b6ca0f7a453e492043efb692b3#rd</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h2><p><a href="https://community.fs.com/encyclopedia/server-memory.html">FS Community 服务器内存指南</a></p><p><a href="https://www.crucial.com/articles/about-memory/everything-about-ddr5-ram">Crucial DDR5 指南</a></p><p><a href="https://my.oschina.net/emacs_8177478/blog/15926560">开源中国 内存优化指南</a></p><p><a href="https://blog.csdn.net/gitblog_00650/article/details/142156744">CSDN MemTester 使用指南</a></p><p><a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/memory-faults.html">Linux 内存诊断手册</a></p><p><a href="https://www.dell.com/support/manuals/en-us/poweredge-r740xd/poweredge-r740xd-owner%27s-manual/ecc-memory-error-management">Dell ECC 错误管理指南</a></p><p><a href="https://www.cxl.io/wp-content/uploads/2023/04/CXL-3.0-Release.pdf">CXL 3.0 官方文档</a><br> <a href="https://ieeexplore.ieee.org/document/10010394">IEEE 存算一体白皮书</a><br> <a href="https://serverfault.com/questions/tagged/memory">服务器内存专题</a><br> <a href="https://forums.tomshardware.com/forums/server-hardware.31/">服务器内存讨论区</a></p><p><a href="https://docs.nvidia.com/deploy/">NVIDIA GPU内存管理指南</a></p><p><a href="https://www.intel.com/content/www/us/en/developer/articles/white-paper.html">Intel内存技术白皮书</a></p><p><a href="https://www.techpowerup.com/review/amd-epyc-server-architecture/4.html">AMD EPYC 内存架构</a></p><p><a href="https://www.jedec.org/document_search?search_api_views_fulltext=ddr5">JEDEC DDR5 SPD 文档</a></p>]]></content>
    
    
    <summary type="html">本文系统讲解服务器内存的核心知识，涵盖基本概念（DRAM、DDR、HBM）、发展历程（HBM技术演进）、硬件组成（channel→DIMM→rank→chip→bank层级结构）、技术特性（ECC校验、Bank Group并行访问、3D堆叠封装）、性能优化（多通道配置、NUMA架构、大页内存）、监控与测试工具（dmidecode/memtester/numastat/AIDA64）、管理维护（热插拔、云原生内存QoS）及故障诊断（内存泄漏、ECC错误、兼容性问题），并展望DDR5普及、CXL协议、存算一体等技术趋势，是服务器内存技术的综合性知识手册。</summary>
    
    
    
    <category term="服务器硬件" scheme="https://crayon.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="服务器内存" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98/"/>
    
    <category term="内存技术" scheme="https://crayon.github.io/tags/%E5%86%85%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
    
    <category term="HBM" scheme="https://crayon.github.io/tags/HBM/"/>
    
    <category term="DDR" scheme="https://crayon.github.io/tags/DDR/"/>
    
    <category term="内存测试" scheme="https://crayon.github.io/tags/%E5%86%85%E5%AD%98%E6%B5%8B%E8%AF%95/"/>
    
    <category term="内存管理" scheme="https://crayon.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="ECC" scheme="https://crayon.github.io/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>服务器GPU知识手册</title>
    <link href="https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8GPU%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"/>
    <id>https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8GPU%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/</id>
    <published>2025-05-30T03:30:54.000Z</published>
    <updated>2025-05-30T03:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器GPU知识手册"><a href="#服务器GPU知识手册" class="headerlink" title="服务器GPU知识手册"></a>服务器GPU知识手册</h1><h2 id="GPU简介"><a href="#GPU简介" class="headerlink" title="GPU简介"></a>GPU简介</h2><p>GPU，Graphic Processing Unit图形处理器，专门处理图形核心处理器，90%的ALU运算单元，5%的Control控制单元，5%的Cache缓存单元，目前服务器GPU卡用于大模型的训练和推理</p><h2 id="GPU的PLX三种拓扑"><a href="#GPU的PLX三种拓扑" class="headerlink" title="GPU的PLX三种拓扑"></a>GPU的PLX三种拓扑</h2><ul><li>Balance拓扑：GPU直通虚拟化，适合中&#x2F;小规模深度学习模型，推理，公有云和HPC</li><li>Common拓扑：AI训练性能优异，适用于多数的深度学习训练场景</li><li>Casecade拓扑：部分AI训练模型性能最优，适用于多参数模型的大规模深度学习训练场景</li></ul><h2 id="GPU的核心参数说明"><a href="#GPU的核心参数说明" class="headerlink" title="GPU的核心参数说明"></a>GPU的核心参数说明</h2><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/XtumbbhCOo1A8JxXK5IcPqVbnmb.png" src-width="968" src-height="421" align="center"/><h2 id="相关名词解释"><a href="#相关名词解释" class="headerlink" title="相关名词解释"></a>相关名词解释</h2><p>HBM：High Bandwidth Memory显存，是一种高带宽的3D堆叠内存技术，实现更高的数据传输速率和更低的功耗</p><p>HGX：High-Performance GPU extended，是一个计算平台通过NVLink和NVSwitch将多个GPU串连起来提供强大的AI运算能力，A800模组底板，delta板+nvswitch+SXM&#x3D;HGX</p><p>DGX：Data Center GPU数据中心，AI超级计算机硬件配置是固定的，设计是开箱即用</p><p>SXM：Tesla Scalable X-Module是NVIDIA Tesla GPU的一种物理封装形式，SXM GPU通常具有更高的功率和性能，支持多GPU扩展，通过NVLink技术实现GPU之间的高速通信</p><h2 id="算力理论值计算"><a href="#算力理论值计算" class="headerlink" title="算力理论值计算"></a>算力理论值计算</h2><p>TFLOPS，即每秒浮点运算次数</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/PjSRbkRKDorQo1xFYaZcqsnKnbd.png" src-width="1714" src-height="561" align="center"/><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/YnUFb8tH9oPdF3xo5TicXn1Vnfe.png" src-width="1558" src-height="321" align="center"/><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/WsgZbJQ9Mo1zRmxGsMFc31a4n4g.png" src-width="875" src-height="596" align="center"/><p>通过降低精度而加快模型训练速度、降低显存占用率的方法——混合精度，使用较低精度的浮点数来表示神经网络中的权重和激活值，从而减少内存使用和计算开销，进而加速训练过程。</p><p>算力计算公式：Flops&#x3D;CPU核数<em>单核主频</em>CPU单个周期浮点计算能力</p><p>TFLOPS：TFLOPS是每秒执行的万亿次浮点运算。这是衡量计算性能的传统方式，尤其用于需要大量浮点计算的任务，如图形处理和科学计算。</p><p>TOPS：TOPS是每秒执行的万亿次运算。这个术语更常用于衡量AI和机器学习硬件的性能，因为这些任务通常包括大量的整数和固定点运算，而不是传统的浮点运算。 TOPS特别适用于评估深度学习推理任务的性能。</p><p>总的来说，TFLOPS更多地关注浮点运算性能，而TOPS则涵盖了更广泛的运算类型，更适用于AI和深度学习应用</p><h2 id="英伟达GPU常见的各种核心"><a href="#英伟达GPU常见的各种核心" class="headerlink" title="英伟达GPU常见的各种核心"></a>英伟达GPU常见的各种核心</h2><ul><li><p>CUDA Core<br>  英伟达GPU的参数中，最常看到的核心类型。Nvidia通常用最小的运算单元表示自己的运算能力，CUDA Core 指的是一个执行基础运算的处理元件。我们所说的CUDA Core数量，通常对应的是 FP32 计算单元的数量。</p></li><li><p>Tensor Core<br>  核心特别大，用于机器学习加速，它可以把整个矩阵都载入寄存器中批量运算，实现十几倍的效率提升，从Volta 架构发布以来，奠定了英伟达在AI训练的领军地位，每次升级都有新支持的数据类型。</p></li><li><p>RT Cores<br>  正常数据中心级的GPU核心是没有RT Core的，主要是消费级显卡才为光线追踪运算添加了RT Cores，考虑到芯片的空间有限，每个SM里面只有1个光追核心(为此还砍掉了大部分的FP64)。可以极大地提升了游戏渲染效率。</p></li></ul><h2 id="GPU-GPU的经典互联方案NVLink等技术解析"><a href="#GPU-GPU的经典互联方案NVLink等技术解析" class="headerlink" title="GPU-GPU的经典互联方案NVLink等技术解析"></a>GPU-GPU的经典互联方案NVLink等技术解析</h2><p>Nvlink是英伟达私有的芯片互联技术，通常用于GPU之间或者GPU到CPU，Nv Switch是基于Nvlink技术的芯片或者类似交换机的设备，在主机内部NvSwitch是芯片，跨节点互联就是搭载Nv switch芯片的独立网络设备。历代Nvlink的版本和速率变化如下：</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/Nmnyb8ngmo7ZmGx53WJcRsfTnRd.png" src-width="1080" src-height="663" align="center"/><p>Nvidia GPU互联技术最新的是NVLink5.0，与前代4.0相比通道数不变，速率翻倍至1.8TB&#x2F;s</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/MMFZbkFhSoXuGgxOPTFc8Wtqnvc.png" src-width="1967" src-height="482" align="center"/><p>2024年，Blackwell架构的B200正式发布，NVLink和NVSwitch芯片分别来到5.0和4.0的版本，单条链路速率翻倍来到单向50GB&#x2F;s，数量还是18条，GPU间的互联带宽翻倍至1.8TB&#x2F;s，8个GPU对应2个NVswitch芯片，每个NvSwitch芯片拥有72个NVLink5.0接口，每个GPU用9条NVLink和2个NVSwitch芯片互联，如下图所示</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/VKzabqv54oD5OzxWwADcd8V8n4f.png" src-width="1080" src-height="512" align="center"/><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/C3HTbUeuEo5nUyxrs50cAXLJnkf.png" src-width="1080" src-height="396" align="center"/><h2 id="GPU基础环境安装"><a href="#GPU基础环境安装" class="headerlink" title="GPU基础环境安装"></a>GPU基础环境安装</h2><h3 id="查看GPU信息"><a href="#查看GPU信息" class="headerlink" title="查看GPU信息"></a>查看GPU信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看GPU型号</span></span><br><span class="line">nvidia-smi -q | grep -i <span class="string">&quot;Product Name&quot;</span></span><br><span class="line"><span class="comment">#查看GPU槽位</span></span><br><span class="line">lspci -vt | dmidecode -t slot | grep </span><br><span class="line"><span class="comment">#开启gpu持久模式</span></span><br><span class="line">nvidia-smi pm 1</span><br><span class="line"><span class="comment">#查看是否为一拖八</span></span><br><span class="line">nvidia-smi top -m</span><br></pre></td></tr></table></figure><h3 id="nvidia驱动下载"><a href="#nvidia驱动下载" class="headerlink" title="nvidia驱动下载"></a><a href="https://www.nvidia.cn/Download/Find.aspx?lang=cn">nvidia驱动下载</a></h3><h3 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a><a href="https://developer.nvidia.com/cuda-toolkit-archive">安装CUDA</a></h3><h3 id="Nvidia-smi（System-Management-Interface-SMI）监控管理工具"><a href="#Nvidia-smi（System-Management-Interface-SMI）监控管理工具" class="headerlink" title="Nvidia-smi（System Management Interface SMI）监控管理工具"></a>Nvidia-smi（System Management Interface SMI）监控管理工具</h3><p>这个命令会报告系统中每个GPU的基本监控数据和硬件参数，配置数据</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/He6JbTaIeoFmwFxwQ56cVLrTnsg.png" src-width="600" src-height="362" align="center"/><p>参考链接：<a href="https://developer.nvidia.com/system-management-interface">https://developer.nvidia.com/system-management-interface</a></p><h2 id="GPU测试可以参考U盘环境介绍-pdf"><a href="#GPU测试可以参考U盘环境介绍-pdf" class="headerlink" title="GPU测试可以参考U盘环境介绍.pdf"></a>GPU测试可以参考<a href="GpLJbCG4toikNIxnziqc4fbYnsc">U盘环境介绍.pdf</a></h2><h3 id="Shoc-master"><a href="#Shoc-master" class="headerlink" title="Shoc-master"></a>Shoc-master</h3><p>The Scalable HeterOgeneous Computing SHOC单双精度浮点型算力测试，基于GEMM,FFT,Stencil等计算模式，综合CUDA与OpenCL，MPI方式进行GPU算力计算（兼容cuda12之前版本）</p><h3 id="Cuda-samples-cuda测试用例"><a href="#Cuda-samples-cuda测试用例" class="headerlink" title="Cuda-samples cuda测试用例"></a>Cuda-samples cuda测试用例</h3><p><code>#测试带宽H2D</code></p><p><code>tar -zxvf cuda-samples-11.8.tar.gz</code></p><p><code>cd cuda-samples-11.8/Samples/1_Utilities/bandwidthTest/</code></p><p><code>make</code></p><p><code>单卡./bandwidthTest &gt;&gt; bandwidthTest.log</code></p><p><code>全卡./bandwidthTest -device=all &gt;&gt; bandwidthTest_all.log</code></p><p><code>#Bandwidth测试—P2P Bandwidth</code></p><p><code>cd /cuda-samples-12.2/Samples/5_Domain_Specific/p2pBandwidthLatencyTest/</code></p><p><code>make</code></p><p><code>./ p2pBandwidthLatencyTest</code></p><p><code>H800参考值：400GB/s,达到80%即可</code></p><p><code>H100参考值：900GB/s,达到80%即可</code></p><p>参考链接：<a href="https://github.com/NVIDIA/cuda-samples/tree/master">https://github.com/NVIDIA/cuda-samples/tree/master</a></p><h3 id="gpu-burn压测"><a href="#gpu-burn压测" class="headerlink" title="gpu_burn压测"></a>gpu_burn压测</h3><p>针对多GPU的压测程序，使用CUDA程序API，每个GPU分配一个进程，一个进程用于跟踪GPU的温度（可用情况下），另一个进程用于报告进度。每个进程分配90%的可用GPU内存，初始化2个随机的2048*2048矩阵，并持续对它们执行高效的CUBLAS矩阵乘法例程，并将结果存储在分配的内存中。浮点数和双精度数均支持。通过将新计算的结果与GPU上先前的计算结果进行比较来检查计算的正确性。这样，GPU始终处于100%繁忙状态，而CPU处于空闲状态。错误计算的数量将返回CPU，并与迄今为止执行的操作数量和GPU温度一起报告给用户。</p><p><code>三天：./gpu_burn 259200</code></p><p><code>压测一周：nohup ./gpu_burn 604800 &amp;</code></p><p><code>抓取GPU压测温度功耗：nvidia-smi -l 10 --format=csv --filename=report.csv --query-gpu=timestamp,name,temperature.gpu,power.draw</code></p><p><code>最后查看cat /var/log/messages | grep -iE &quot;error|fail|warn&quot;</code></p><p><code>Dmesg | grep -iE &quot;error|fail|warn&quot;</code></p><p>参考链接：<a href="https://github.com/wilicc/gpu-burn">https://github.com/wilicc/gpu-burn</a></p><h3 id="stream-vectorized-double-test"><a href="#stream-vectorized-double-test" class="headerlink" title="stream_vectorized_double_test"></a>stream_vectorized_double_test</h3><p>nvidia提供的基于CUDA优化的STREAM测试工具，测试单个GPU的显存带宽</p><p>参考链接：<a href="https://www.cs.virginia.edu/stream/">https://www.cs.virginia.edu/stream/</a></p><h3 id="Peak-tops"><a href="#Peak-tops" class="headerlink" title="Peak tops"></a>Peak tops</h3><p>nvidia提供的算力测试工具，tensor实现FP8，INT8，FP16，BF16，TF32；FFMA实现FP32（只兼容hoper架构）</p><h3 id="clublasMatmulBench"><a href="#clublasMatmulBench" class="headerlink" title="clublasMatmulBench"></a>clublasMatmulBench</h3><p>NVIDIA CUDA Basic Linear Algebra(cuBLAS)库提供，用于测试单个GPU的general matrix multiplication（GEMM）性能</p><p>参考链接：<a href="https://developer.nvidia.com/cublas">https://developer.nvidia.com/cublas</a></p><h3 id="nvbandwidth"><a href="#nvbandwidth" class="headerlink" title="nvbandwidth"></a>nvbandwidth</h3><p>nvbandwidth是一个用于测量NVIDIA GPU带宽的工具，用于测量不同链接上各种memcpy模式下的带宽</p><p>单向测试，测量从CPU到GPU的带宽</p><p>双向测试，同时测量两个方向上的带宽</p><p>参考链接：<a href="https://github.com/NVIDIA/nvbandwidth">https://github.com/NVIDIA/nvbandwidth</a></p><h3 id="NCCL测试"><a href="#NCCL测试" class="headerlink" title="NCCL测试"></a>NCCL测试</h3><p>nccl库测试说明<a href="https://mp.weixin.qq.com/s/3lrLSYe7JhalTcXjpFQ0dA">https://mp.weixin.qq.com/s/3lrLSYe7JhalTcXjpFQ0dA</a></p><h3 id="batchCUBLAS"><a href="#batchCUBLAS" class="headerlink" title="batchCUBLAS"></a>batchCUBLAS</h3><p>Batch CUBLAS（CUDA Basic Linear Algebra Subprograms）测试是用于评估 NVIDIA GPU 在执行线性代数运算时的性能的工具。CUBLAS 是 NVIDIA 提供的一个库，它实现了在 GPU 上运行的基本线性代数运算，比如矩阵乘法、向量点乘等。</p><p>参考链接：<a href="https://github.com/NVIDIA/cuda-samples/blob/master/Samples/4_CUDA_Libraries/batchCUBLAS">https://github.com/NVIDIA/cuda-samples/blob/master/Samples/4_CUDA_Libraries/batchCUBLAS</a></p><h3 id="Unixbench测试"><a href="#Unixbench测试" class="headerlink" title="Unixbench测试"></a>Unixbench测试</h3><p>Unixbench 是一个基准测试工具，它通过一系列测试来评估 Unix 系统的性能。Unixbench 测试套件包括对 CPU、内存、磁盘 I&#x2F;O、系统调用等的测试。maxCopies 是 Unixbench 中的一个参数，它用于控制测试中数据复制的最大次数。</p><p>软件包链接：<a href="https://soft.lnmp.com/test/unixbench/">https://soft.lnmp.com/test/unixbench/</a></p><h3 id="Dcgmi-diag-r-4"><a href="#Dcgmi-diag-r-4" class="headerlink" title="Dcgmi diag -r 4"></a>Dcgmi diag -r 4</h3><p>DCGM Diagnostics提供了系统级的英伟达GPU卡检测工具，采用level1，level2，level3和level4的诊断级别，检测软件，pcie+nvlink，GPU memory，Memory Bandwidth，  Diagnostics，Targeted Stress，Targeted Power，Memory Stress，Input EDPp方面的检测</p><p>参考链接：<a href="http://docs.nvidia.com/datacenter/dcgm/latest/user-guide/dcgm-diagnostics.html">http://docs.nvidia.com/datacenter/dcgm/latest/user-guide/dcgm-diagnostics.html</a></p><ol><li>p2pBandwidthLatencyTest</li></ol><p>测试使用cuda在GPU与GPU直接数据传输的效率，验收新服务器的时候常用</p><h2 id="DCGM实现GPU的性能分析"><a href="#DCGM实现GPU的性能分析" class="headerlink" title="DCGM实现GPU的性能分析"></a>DCGM实现GPU的性能分析</h2><p>dcgmi 是 Nvidia datacenter-gpu-manager 的命令行程序，可以用来采集 GPU 各类子资源的利用率数据，揭示的数据比 nvidia-smi 更详细，也更便于对接监控系统（比如 Prometheus）。主要可用它来看模型训练过程中的 NVLink 带宽使用情况。NVIDIA GPU上存在一些硬件计数器，这些计数器可以用来收集一些设备级别的性能指标，例如GPU利用率、内存使用情况等。借助NVIDIA提供的NVML（NVIDIA Management Library）库或DCGM（Data Center GPU Manager）工具能够查询这些硬件层提供的指标。NVIDIA Data Center GPU Manager (DCGM) 是一套用于管理和监控数据中心 NVIDIA GPU 的工具集。</p><p>DCGM: nvidia data center gpu manager是一套用于在集群环境中管理和监控 NVIDIA 数据中心 GPU 的工具。它包括主动健康监控、全面诊断、系统警报和治理策略（包括电源和时钟管理）。 DCGM 诊断是一款运行状况检查工具，可以检查基本的 GPU 运行状况，包括是否存在 ECC 错误、PCIe 问题、带宽问题以及运行 CUDA 程序的常见问题。</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/OWaIbWzesoCrCjxtRaPc17Xonkg.png" src-width="984" src-height="835" align="center"/><h2 id="Fieldiag压测工具"><a href="#Fieldiag压测工具" class="headerlink" title="Fieldiag压测工具"></a>Fieldiag压测工具</h2><p>当前NV官方以fieldiag压测结果作为RMA的标准，不同的GPU都有匹配的fieldiag工具（这些工具需要在哪里进行获取？），工具可以运行在DOS环境或者大多数Linux系统kernel2.6.16 or later,</p><p>Glibc 2.32 or later, 只支持64-bit x86_64,TinyLinux version 12.08 or later is supported.</p><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/KT7TbZSgzoaX0bxlGTGcge0fnae.png" src-width="1026" src-height="796" align="center"/><p>支持的NVIDIA Tesla硬件：</p><ul><li>Tesla C2050, C2070, C2075</li><li>Tesla M2050, M2070, M2070Q, M2075</li><li>Tesla S2050</li><li>Tesla X2070, X2090</li><li>Tesla M2090</li><li>Tesla K10, K20, K20X, K40</li></ul><h2 id="NVQual"><a href="#NVQual" class="headerlink" title="NVQual"></a>NVQual</h2><h3 id="故障问题"><a href="#故障问题" class="headerlink" title="故障问题"></a>故障问题</h3><p>XID消息是来自NVIDIA驱动程序的错误报告，该报告打印到操作系统的内核日志或事件日志上；xid指示GPU硬件问题，NVIDIA软件问题或用户应用程序问题；常见的xid事件：</p><ul><li>XID 13: GR: SW Notify Error:常见原因：一般为用户应用程序故障。通常这是一个数组下标越界错误。也有可能是非法指令，非法寄存器等其他情况。极少数情况下 会出现硬件故障或者软件错误导致XID 13</li><li>XID 31: Fifo: MMU Error:常见原因： 一般为应用程序级别故障。 当MMU上报故障时，当gpu芯片上的应用程序进行非法地址访问时，会触发此类故障并记录。</li><li>XID 32: PBDMA Error:常见原因： 一般是硬件问题。当 DMA 控制器报告故障时，会记录此事件，该控制器通过 PCI-E 总线管理 NVIDIA 驱动程序和 GPU 之间的通信流。这些故障主要涉及PCI的质量问题，一般不是由用户应用程序操作引起的。解决方式： 联合硬件运维处理</li><li>XID 43: RESET CHANNEL VERIF ERROR:常见原因：基本是用户应用程序故障。不影响GPU的健康状况解决方式: 联合开发同事处理</li><li>XID 45: OS: Preemptive Channel Removal:常见原因： 通常这并代表发生故障。用户程序退出中止，control-C cpu reset sigkill 都会导致此类事件</li><li>XID 48: DBE (Double Bit Error) ECC Error:常见原因：怀疑硬件故障。当gpu检测到不可修正的错误，会记录该事件。</li><li>XID 63, 64: ECC Page Retirement or ROW REMAPPING:常见原因： ECC显存故障，常见于硬件故障。 当应用程序遭遇到 GPU 显存硬件错误时，NVIDIA 自纠错机制会将错误的内存区域retire 或者 remap，retirement 和remapped 信息需要记录到 infoROM 中才能永久生效。A 系列显卡开始支持row remappingA系列之前的显卡，例如T4 V100 P100 支持dynamic page retirement解决方式：联合硬件同事排查</li><li>XID 74: Nvlink ERROR:常见原因：多半为硬件故障。多卡GPU之间使用nvlink进行通讯时出现问题，链路故障或者g卡故障都会导致。解决方式：可自行通过gpu reset 或者重启节点 进行恢复。如果此时还无法恢复，需要进行维修处理。</li><li>XID 79: GPU has fallen off the bus:常见原因： 多半是硬件问题。具体现象为当gpu驱动尝试通过PCI-e总线访问GPU，访问失败。此事件通常由PCIe链路上的硬件故障引起，导致GPU由于链路中断而无法访问。解决方式：硬件维修</li><li>XID 93: Non-fatal violation of provisioned inforom wear limit:常见原因: 当GPU驱动程序因违反使用nvflash-elsesessionstart导致更新infoROM失败。大多数情况下，这并不是软件驱动故障。</li><li>XID 94, 95: CONTAINED&#x2F;UNCONTAINED ECC ERRORs:常见原因：当应用程序遭遇到 GPU 不可纠正的显存 ECC 错误时，NVIDIA 错误抑制机制会尝试将错误抑制在踩到硬件故障的应用程序，而不会让错误导致 GPU 上的所有应用程序受到影响。当抑制机制成功抑制错误时，会产生Xid 94事件，仅影响遭遇了不可纠正 ECC 错误的应用程序。 Xid95 代表抑制失败，此时表明运行在该 GPU 上的所有应用程序都已受到影响。解决方式: 联合硬件同事处理</li><li>XID 110 SECURITY FAULT ERROR:常见原因：硬件故障。解决方式： 恢复最近所有的系统硬件修改，并冷启动系统。需联系硬件处理。</li><li>XID 119, 120: GSP RPC Timeout &#x2F; GSP Error:常见原因： 当在 GPU 的 GSP 核心上运行的代码中发生错误&#x2F;或在等待 GPU 的 GSP 核心响应 RPC 消息时发生超时时。解决方式: 可以尝试重启节点或者重置GPU。如果还不行联系硬件处理</li></ul><p>参考链接：<a href="https://docs.nvidia.com/deploy/xid-errors/index.html">https://docs.nvidia.com/deploy/xid-errors/index.html</a></p><h2 id="国内外GPU技术发展趋势"><a href="#国内外GPU技术发展趋势" class="headerlink" title="国内外GPU技术发展趋势"></a>国内外GPU技术发展趋势</h2><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><ul><li><a href="https://www.techpowerup.com/gpu-specs/">GPU相关规格参数</a></li><li><a href="https://www.mydrivers.com/zhuanti/tianti/gpu/index_nvidia.html">消费卡相关规格参数</a></li><li><a href="https://blog.csdn.net/qq_41897488/article/details/141956083">GPU全面介绍</a></li><li><a href="https://docs.nvidia.com/deploy/hw-field-diag/index.html">NVIDIA Field Diagnostic Software</a></li><li><a href="https://mp.weixin.qq.com/s/QaZFME7afvPtefoyU1WXlg">一文搞懂服务器内部CPU&amp;GPU互联技术和带宽计算方式</a></li><li><a href="https://docs.nvidia.com/datacenter/dcgm/latest/index.html">英伟达dcgmi文档</a></li></ul>]]></content>
    
    
    <summary type="html">本文系统讲解服务器GPU的核心知识，涵盖基础概念（GPU拓扑结构、核心参数如HBM/HGX等）、关键技术（CUDA Core/Tensor Core/RT Core、NVLink互联技术）、环境安装与测试方法（nvidia-smi工具、shoc-master/cuda-samples等测试用例）、故障诊断（XID错误解析）及发展趋势，是服务器GPU技术的综合性知识手册。</summary>
    
    
    
    <category term="服务器硬件" scheme="https://crayon.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="服务器GPU" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8GPU/"/>
    
    <category term="GPU技术" scheme="https://crayon.github.io/tags/GPU%E6%8A%80%E6%9C%AF/"/>
    
    <category term="GPU测试" scheme="https://crayon.github.io/tags/GPU%E6%B5%8B%E8%AF%95/"/>
    
    <category term="NVLink" scheme="https://crayon.github.io/tags/NVLink/"/>
    
    <category term="GPU参数" scheme="https://crayon.github.io/tags/GPU%E5%8F%82%E6%95%B0/"/>
    
    <category term="GPU故障诊断" scheme="https://crayon.github.io/tags/GPU%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>服务器CPU知识手册</title>
    <link href="https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"/>
    <id>https://crayon.github.io/2025/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/</id>
    <published>2025-05-30T03:24:28.000Z</published>
    <updated>2025-05-30T03:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器CPU知识手册"><a href="#服务器CPU知识手册" class="headerlink" title="服务器CPU知识手册"></a>服务器CPU知识手册</h1><h2 id="📌-基本概念与功能"><a href="#📌-基本概念与功能" class="headerlink" title="📌 基本概念与功能"></a>📌 基本概念与功能</h2><h3 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h3><p>服务器CPU负责处理和执行系统指令，与普通CPU相比，服务器CPU需满足：高并发处理能力，高稳定性，长时间运行可靠性，更多核心与线程，更强扩展性；CPU包括运算逻辑部件，寄存器部件和控制器等</p><p>目前CPU内部已经整合了内存控制器DMI，pci链接通信QPI（Intel）</p><h3 id="核心组成"><a href="#核心组成" class="headerlink" title="核心组成"></a>核心组成</h3><ul><li>控制单元：负责指令提取与解码</li><li>算术逻辑单元(ALU)：执行各种运算操作</li><li>寄存器：临时存储数据的高速存储单元</li><li>各类寄存器类型：<ul><li>累加寄存器</li><li>标志寄存器</li><li>程序计数器</li><li>基址寄存器</li><li>变址寄存器</li><li>通用寄存器</li><li>指令寄存器</li><li>栈寄存器</li></ul></li></ul><h3 id="指令执行流程"><a href="#指令执行流程" class="headerlink" title="指令执行流程"></a>指令执行流程</h3><ol><li>取指：从内存中提取指令</li><li>解码：控制单元解析指令</li><li>执行：ALU执行运算</li><li>访存：必要时访问内存</li><li>写回：将结果写回寄存器或内存</li></ol><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/LGXwbj1WdoBNSqxTn0Pcii1ynPg.png" src-width="750" src-height="301" align="center"/><h3 id="关键性能参数"><a href="#关键性能参数" class="headerlink" title="关键性能参数"></a>关键性能参数</h3><ul><li><p>主频：CPU时钟频率，决定单核处理速度</p><ul><li>计算公式：<code>主频 = 外频 × 倍频</code></li><li>3.0GHz主频，一秒钟可以产生30亿个脉冲信号</li><li>基频：CPU内存时钟频率</li><li>倍频：CPU通常就是在内部设计有一个锁相环频率发生器，对于输入的时钟信号进行分频处理，按照一定比例提高输入的外频频率，从而得到CPU的实际工作频率，这个比例就称之为倍频系数（简称倍频）</li><li>外频：除cpu外部的一些设备工作的频率，一般工作在较低的频率下</li><li>睿频：intel推出的自动提升处理器频率的技术，需要在BIOS下做一些性能相关的预制设置关掉节能相关项</li></ul></li><li><p>核心数：物理核心数量，决定并行处理能力</p></li><li><p>线程数：通过超线程技术(如Intel的Hyper-Threading，AMD的SMT)，单核可虚拟为多逻辑核</p></li><li><p>缓存：CPU缓存是芯片上的小型高速内存（基于SRAM），临时存储CPU需要快速【预取】的数据</p><ul><li>L1缓存：最快容量最小，范围128KB到2MB之间</li><li>L2缓存：响应速度和容量居中，可以每个核心独有，也可以共享，范围256KB到32MB之间</li><li>L3缓存：响应速度最慢容量最大，通常都是共享的，范围1MB到128MB之间</li></ul></li><li><p>架构：Intel和AMD的x86架构的复杂指令集CISC，IBM是PowerPC架构和ARM公司的ARM架构的精简指令集RISC，目前还有 RISC-V开源免费的架构</p><ul><li>ARM架构：进阶精简指令集，国产的飞腾，鲲鹏</li><li>x86_64架构：主要就是Intel，AMD，国产海光（amd授权架构）</li><li>MIPS架构：精简指令集，07年中科院计算机研究所获得处理器IP的全部专利和总线，指令集授权，2021年信息技术应用创新主论坛发布龙芯自主指令系统架构（LoongArch），主要用于国防科技、交换机、路由器等，在性能上和ARM还有一定差距</li><li>RISC-V架构：新兴的架构，开源免费，不需要授权费，近几年受关注，前景巨大？</li></ul></li><li><p>制程工艺：指制造CPU的集成电路的精细度，14nm，10nm，7nm等</p></li><li><p>内存通道数：CPU能够同时与内存进行数据交互的独立通道的最大数量</p></li><li><p>功耗TDP：CPU满载处理器芯片散发出来的热量需要通过散热解决方案散发出来的平均功率值单位为瓦（W）</p></li><li><p><a href="http://jfkb.sugon.com/index.php?doc-view-1619">NUMA</a>：Non-Uniform Memory Access非统一内存访问，是为了优化多处理器系统中内存访问性能的重要架构设计，将系统中的内存划分为多个本地内存区域，每个区域与特定的一组处理器核心相对应，形成一个个相对独立的NUMA节点，<a href="http://jfkb.sugon.com/index.php?doc-view-1668">numa简介</a></p></li><li><p>SNC：Sub NUMA Clustering子非统一内存访问集群，一种与计算机系统内存架构和处理器性能优化技术，在NUMA架构下进一步优化CPU访问内存的性能</p></li><li><p>PCU：CPU内Power Control Unit功耗控制单元，PCU以1ms速度实时检测核心的温度、电流及功耗等参数</p></li><li><p>可扩展性：双路（一个主板装两个CPU），四路（一个主板装四个CPU）</p></li><li><p>虚拟化：intel的VT-x</p></li><li><p>PCIe总线：cpu支持的pcie速率和通道数</p></li><li><p>UPI，CXL2.0，CPU封装（LGA，PGA和BGA）和接口</p></li></ul><h3 id="CPU研发阶段样品"><a href="#CPU研发阶段样品" class="headerlink" title="CPU研发阶段样品"></a>CPU研发阶段样品</h3><ul><li>Engineering Sample（ES） - 工程样品阶段</li><li>Qualification Sample（QS） - 验证样品阶段</li><li>Commercial Sample（CS） - 商业样品阶段</li></ul><h3 id="多核与多处理器技术"><a href="#多核与多处理器技术" class="headerlink" title="多核与多处理器技术"></a>多核与多处理器技术</h3><ul><li><p>片内互联：</p><ul><li>Intel的Mesh架构：二维网格布局</li><li>AMD的Infinity Fabric：优化多核间通信效率</li></ul></li><li><p>片间互联：</p><ul><li>UPI (Ultra Path Interconnect)</li><li>QPI (QuickPath Interconnect)</li><li>提升多处理器服务器扩展性</li></ul></li></ul><h3 id="服务器CPU型号解析"><a href="#服务器CPU型号解析" class="headerlink" title="服务器CPU型号解析"></a>服务器CPU型号解析</h3><ul><li><p>Intel Xeon系列：</p><ul><li>型号示例：Platinum 8260</li><li>首位数字代表代际(8为第二代可扩展处理器)</li><li>后缀标识特性(N为网络优化，T为功耗优化)</li></ul></li><li><p>AMD EPYC系列：</p><ul><li>采用Chiplet设计</li><li>通过高带宽互联整合多计算单元</li></ul></li><li><p><a href="https://mp.weixin.qq.com/s/hxg3fzbv75tNZVW1tN40iA">Intel和AMD服务器CPU速查表</a></p></li></ul><h3 id="业务选型考量因素"><a href="#业务选型考量因素" class="headerlink" title="业务选型考量因素"></a>业务选型考量因素</h3><ul><li>计算密集型：优先考虑高核心数、高主频</li><li>内存密集型：优先考虑内存通道数和内存容量</li><li>I&#x2F;O密集型：优先考虑PCIe通道数和带宽</li><li>虚拟化环境：考虑虚拟化扩展指令集支持</li><li>高性能计算：考虑向量计算能力和专用指令集</li></ul><h3 id="Intel和AMD服务器CPU命名规则"><a href="#Intel和AMD服务器CPU命名规则" class="headerlink" title="Intel和AMD服务器CPU命名规则"></a>Intel和AMD服务器CPU命名规则</h3><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/NszMbI7mbog211xBFGfcGpX1nrd.png" src-width="429" src-height="516" align="center"/><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/KmIubhp2qo4KSVxifbsc8EOjnse.png" src-width="683" src-height="335" align="center"/><h3 id="Intel的UPI和AMD的xGMI的CPU互联带宽"><a href="#Intel的UPI和AMD的xGMI的CPU互联带宽" class="headerlink" title="Intel的UPI和AMD的xGMI的CPU互联带宽"></a>Intel的UPI和AMD的xGMI的CPU互联带宽</h3><p>服务器CPU数量超过一颗时都需要采用互联技术实现多颗CPU之间的通信</p><h4 id="Intel的CPU互联技术QPI或UPI"><a href="#Intel的CPU互联技术QPI或UPI" class="headerlink" title="Intel的CPU互联技术QPI或UPI"></a>Intel的CPU互联技术QPI或UPI</h4><h4 id="ADM的CPU互联技术xGMI"><a href="#ADM的CPU互联技术xGMI" class="headerlink" title="ADM的CPU互联技术xGMI"></a>ADM的CPU互联技术xGMI</h4><h2 id="Intel-CPU开机时序解析"><a href="#Intel-CPU开机时序解析" class="headerlink" title="Intel CPU开机时序解析"></a>Intel CPU开机时序解析</h2><p>系统会在不同的电源状态Power States间转换：</p><ul><li><b>G3</b><b> (机械关机&#x2F;深度睡眠):</b> 完全断电（除了RTC）。</li><li><b>S5</b><b> (软关机):</b> 系统关闭，但电源仍可由按钮或网络唤醒，主板有部分待机电压。</li><li><b>S4</b><b> (休眠):</b> 内存内容保存到硬盘，系统深度休眠。</li><li><b>S3</b><b> (睡眠&#x2F;挂起到内存):</b> CPU停止工作，但内存保持供电以维持内容。</li><li><b>S0</b><b> (工作状态):</b> 系统完全运行。</li><li><b>S0ix</b><b> (现代待机低功耗空闲):</b> <code>S0</code>状态下的低功耗模式。</li><li><b>C10</b><b>:</b> 处理器深度封装 C-state。</li><li><b>Pseudo-G3</b><b> (pG3 - 伪G3):</b> 平台特定的低功耗状态，可能只有 <code>VCCRTC</code> 和最少的唤醒逻辑供电。</li></ul><p>核心组件，处理器（Processor&#x2F;CPU&#x2F;Soc）：核心计算单元，发出许多控制信号；平台逻辑（Platform Login）通常由嵌入式控制器（EC - Embedded Controller）管理，负责协调电源时序，服务器上CPLD；电压调节器（VR - Voltage Regulator）提供各种所需的电压轨。</p><p>信号类型</p><ul><li><b>电源轨 (Power Rails):</b> 提供电压，如 <code>VCCRTC</code>, <code>VCCPRIM_*</code>, <code>VDD2</code>, <code>VCCCORE</code>。</li><li><b>电源就绪信号 (Power Good Signals):</b> 表明某个或某组电源轨已稳定，如 <code>RSMRST_PWRGD</code>, <code>ALL_SYS_PWRGD</code>, <code>IMVP_VR_READY</code>。</li><li><b>控制信号 (Control Signals):</b> 启用&#x2F;禁用 VR 或指示状态转换，如 <code>SLP_S*</code>, <code>PRIM_VR_EN</code>, <code>PLT_PWROK</code>, <code>SYS_PWROK</code>。</li><li><b>复位信号 (Reset Signals):</b> 在电源稳定前将组件保持在复位状态，如 <code>RTCRST#</code>, <code>RSMRST#</code>, <code>PLTRST#</code>, <code>ESPI_RESET#</code>。</li><li><b>睡眠信号 (Sleep Signals - </b><b>SLP_*</b><b>):</b> 处理器输出，指示期望的睡眠状态 (<code>SLP_S5#</code>, <code>SLP_S4#</code>, <code>SLP_S3#</code>, <code>SLP_A#</code>, <code>SLP_SO#</code>)。平台使用这些信号控制电源平面。</li><li><b>eSPI 虚拟线 (eSPI Virtual Wires):</b> 许多传统的硬件信号（如 <code>SLP_S*</code>, <code>PRIMPWRDNACK</code>, <code>PRIMACK#</code>）可以通过 eSPI 总线在处理器和 EC 之间传输，这可能改变相对于硬连线信号的时序。</li></ul><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/618626676">服务器完整上电时序解读</a></p><hr><h2 id="📌-国产CPU"><a href="#📌-国产CPU" class="headerlink" title="📌 国产CPU"></a>📌 国产CPU</h2><p>国产CPU主要包括以下几类：兆芯，海光，飞腾，鲲鹏，龙芯，申威</p><p>详细规格可参考：<a href="https://www.modb.pro/db/650846">国产6大CPU最新规格概述</a></p><p>2018年10月，海光CPU正式获得微软公司WindowsServer2019的认证支持，2019年2月，海光CPU正式获得VMWare公司ESXI7.0的认证支持，2019年3月，海光CPU正式获得Redhat、SUSE等公司LinuxOS的认证支持，2021年8月，海光CPU完成了与阿里云的兼容性互认证。海光CPU产品得到了业界主流操作系统和云计算厂商的认证认可。 </p><hr><h2 id="📌-性能测试方法"><a href="#📌-性能测试方法" class="headerlink" title="📌 性能测试方法"></a>📌 性能测试方法</h2><p>常见的CPU性能测试工具，speccpu最常使用，Cinebench，3DMark，PCMark，Sysbench，CPU-Z，AIDA64，SuperPI，Prime95（P95）</p><h3 id="speccpu测试"><a href="#speccpu测试" class="headerlink" title="speccpu测试"></a>speccpu测试</h3><p>SPEC CPU 是由 SPEC（Standard Performance Evaluation Corporation，标准性能评估公司）推出的一系列用于对 CPU 进行基准测试的工具集，用于精准评估 CPU 性能的权威测试工具，历经了多个版本的迭代更新speccpu2000,speccpu2006,speccpu2017</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [下载speccpu2017的镜像文件](https://pan.baidu.com/s/1kMoMJ5Ufg5oZql4HjyacAg#list/path=%2F)提取码5thr</span></span><br><span class="line"><span class="comment"># 安装相关依赖包</span></span><br><span class="line">yum install -y libnsl.x86_64, gcc, gcc-c++, libxml2.x86_64, libgfortran, libnsl, libnsl2, gcc-gfortran, g++, libaio-devel</span><br><span class="line"><span class="comment"># 挂载镜像文件</span></span><br><span class="line">mount -t iso9660 cpu2017-1.0.2.iso /mnt &amp;&amp; <span class="built_in">cd</span> /mnt</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./install.sh -d /root/cpu2017 -f </span><br><span class="line"><span class="comment"># 安装报错</span></span><br><span class="line"><span class="comment"># specperl: error while loading shared libraries: libnsl.so.1: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="comment"># 解决办法</span></span><br><span class="line">yum install -y libnsl.so</span><br><span class="line">find / -name libnsl.so</span><br><span class="line"><span class="built_in">ln</span> -s /lib64/libnsl.so.3.0.0 /lib64/libnsl.so.1</span><br><span class="line"><span class="comment"># 修改软件配置文件gcc路径</span></span><br><span class="line"><span class="comment"># 设置睿频模式</span></span><br><span class="line">cpupower frequency-set -g performance</span><br><span class="line">cpupower -c all frequency-set -g performance</span><br><span class="line"><span class="comment"># 查看频率</span></span><br><span class="line">watch -n1 “<span class="built_in">cat</span> /proc/cpuinfo | grep <span class="string">&quot;cpu MHz&quot;</span></span><br><span class="line"><span class="comment"># BIOS下打开performce模式，关闭虚拟化，开启turbo，numa，关节能cstate和mwait</span></span><br><span class="line"><span class="comment"># 测试占用内存太大，需要放开限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -s unlimited</span><br><span class="line"><span class="comment"># 测试指令</span></span><br><span class="line">./runcpu -c …/config/Example-gcc-linux-aarch64.cfg intrate</span><br><span class="line"><span class="comment"># 重跑清缓存数据：speccpu清除缓存：rm -fr benchspec/CPU/&lt;em&gt;/run/&lt;/em&gt;</span></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/qq_41897488/article/details/143367894">https://blog.csdn.net/qq_41897488/article/details/143367894</a></p><h3 id="UnixBench测试（用于测量单核和多核性能）："><a href="#UnixBench测试（用于测量单核和多核性能）：" class="headerlink" title="UnixBench测试（用于测量单核和多核性能）："></a>UnixBench测试（用于测量单核和多核性能）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;#下载并安装&lt;/em&gt;</span><br><span class="line">wget https://github.com/kdlucas/byte-unixbench/archive/v5.1.3.tar.gz</span><br><span class="line">tar -zxvf v5.1.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> byte-unixbench-5.1.3/UnixBench</span><br><span class="line">make</span><br><span class="line">&lt;em&gt;# 单核测试&lt;/em&gt;</span><br><span class="line">./Run -c 1</span><br><span class="line">&lt;em&gt;# 多核测试(先获取CPU线程数)&lt;/em&gt;<span class="built_in">cat</span> /proc/cpuinfo | grep <span class="string">&quot;processor&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line">./Run -c &#123;core&#125;</span><br><span class="line">&lt;em&gt;# 测试结束后参考INDEX数值评估性能&lt;/em&gt;</span><br></pre></td></tr></table></figure><h3 id="SuperPI计算（测试通过计算π值测试CPU计算能力）："><a href="#SuperPI计算（测试通过计算π值测试CPU计算能力）：" class="headerlink" title="SuperPI计算（测试通过计算π值测试CPU计算能力）："></a>SuperPI计算（测试通过计算π值测试CPU计算能力）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;#下载并编译&lt;/em&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Fibonacci43/SuperPI.git</span><br><span class="line"><span class="built_in">cd</span> ./SuperPI</span><br><span class="line">gcc -O -funroll-loops -fomit-frame-pointer pi_fftcs.c fftsg_h.c -lm -o pi_css5</span><br><span class="line"></span><br><span class="line">&lt;em&gt;# 计算精度为1&lt;&lt;<span class="string">22=4194304的π值&lt;/em&gt;</span></span><br><span class="line"><span class="string">./pi_css5 $((1&lt;&lt;22</span>))</span><br><span class="line">&lt;em&gt;# 计算时间越短表示计算能力越强# 可用于计算圆周率小数点后的3200万位数&lt;/em&gt;</span><br></pre></td></tr></table></figure><h3 id="stress-ng压测cpu，内存"><a href="#stress-ng压测cpu，内存" class="headerlink" title="stress-ng压测cpu，内存"></a>stress-ng压测cpu，内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载附件  stress-ng.zip</span></span><br><span class="line"><span class="comment">#上传到linux系统中并解压，root权限执行 </span></span><br><span class="line"><span class="built_in">chmod</span> +x stress-ng</span><br><span class="line"><span class="comment">#常规压测命令有以下三个：</span></span><br><span class="line"><span class="comment">#内存压测：</span></span><br><span class="line">./stress-ng  --vm 128  --vm-bytes  96%  -t  2m</span><br><span class="line">cpu压测：</span><br><span class="line">./stress-ng  -c  0  --cpu-method  all  -t  2m</span><br><span class="line"><span class="comment">#指定cpu核心压测：</span></span><br><span class="line">taskset -c 41-63 stress-ng --cpu 23 --cpu-method all –t 2m</span><br><span class="line"><span class="comment">#参数解释：</span></span><br><span class="line"><span class="comment"># --vm 128  指的是启动128个线程给内存压力，根据实际cpu线程数指定。</span></span><br><span class="line"><span class="comment"># --vm-bytes 96%   指的是最多使用96%的内存，根据内存容量指定。</span></span><br><span class="line"><span class="comment"># -t  2m  指的是压测2分钟，根据实际需求指定。</span></span><br><span class="line"><span class="comment"># -c  0 指的是压测所有cpu核心。</span></span><br><span class="line"><span class="comment"># --cpu-method all 指的是让cpu是用多种计算方法或算力进行计算，模拟cpu使用负载。</span></span><br><span class="line"><span class="comment"># taskset -c 41-63指的是指定压测41-63核心。</span></span><br><span class="line"><span class="comment">#--cpu 23指定使用多少个cpu核心来压测，与上一个指定压测的核心数量相同。</span></span><br><span class="line"><span class="comment"># 命令组合：</span></span><br><span class="line">watch  -n  20 [压测命令]</span><br><span class="line"><span class="comment"># 每次压测命令执行完毕后等待20秒，开始下一轮压测，模拟压力起伏。</span></span><br><span class="line"><span class="built_in">nohup</span>  watch -n 20 [压测命令]  &amp;</span><br><span class="line"><span class="comment">#把压测放入后台运行，不影响前台操作。通过ssh登录退出后不影响后台任务（注：通过终端工具如xshell等，ssh到linu系统的，必须使用 exit 指令退出，直接关闭端口会停止后台任务。）</span></span><br></pre></td></tr></table></figure><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h3 id="BIOS性能项设置"><a href="#BIOS性能项设置" class="headerlink" title="BIOS性能项设置"></a>BIOS性能项设置</h3><p>打开performance模式，关闭虚拟化相关设置，开turbo，numa，关节能Cstate和mwait</p><h3 id="OS配置"><a href="#OS配置" class="headerlink" title="OS配置"></a>OS配置</h3><p>对于4k页表的操作系统，在跑int整型时建议配置大页内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># OS页表大小查询命令：</span><br><span class="line">getconf PAGESIZE</span><br><span class="line">#在配置前需要先安装大页库文件：</span><br><span class="line">yum -y install libhuge</span><br><span class="line">echo 100000 &gt; /proc/sys/vm/nr_hugepages</span><br><span class="line">export HUGETLB_MORECORE=yes</span><br><span class="line">export LD_PRELOAD=/usr/lib64/libhugetlbfs.so</span><br><span class="line"># 系统下睿频设置：系统下使用命令设置</span><br><span class="line">cpupower frequency-set -g performance</span><br><span class="line">cpupower -c all frequency-set -g performance</span><br><span class="line"># 或者写进/etc/default配置文件锁频</span><br><span class="line">cd /etc/default</span><br><span class="line">vim grub</span><br><span class="line"># 在GRUB_CMDLINE_LINUX这一行中的quiet后面增加 processor.max_cstate=0 intel_idle.max_cstate=0 idle=poll，保存后退出vim</span><br><span class="line">sed -i ‘s/GRUB_CMDLINE_LINUX=“crashkernel=auto biosdevname=0 net.ifnames=0 rhgb quiet”/GRUB_CMDLINE_LINUX=“crashkernel=auto biosdevname=0 net.ifnames=0 rhgb quiet processor.max_cstate=0 intel_idle.max_cstate=0 idle=poll”/g’ /etc/default/grub</span><br><span class="line"># 使新增加的参数生效,重新生成grub.cfg</span><br><span class="line">find / -name grub.cfg</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg #-o 后接 grub.cfg文件在本机路径</span><br><span class="line">grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg</span><br><span class="line">#重启服务器</span><br><span class="line">reboot</span><br><span class="line">#进入系统后，若失效，则执行</span><br><span class="line">cpupower -c all frequency-set -g performance设置cpu的所有核为性能模式</span><br><span class="line">#使用命令turbostat 1检查cpu的所有核的实际运行频率</span><br></pre></td></tr></table></figure><h3 id="升级gcc和glibc版本，系统自带的gcc版本一般较低"><a href="#升级gcc和glibc版本，系统自带的gcc版本一般较低" class="headerlink" title="升级gcc和glibc版本，系统自带的gcc版本一般较低"></a>升级gcc和glibc版本，系统自带的gcc版本一般较低</h3><h3 id="绑核设置"><a href="#绑核设置" class="headerlink" title="绑核设置"></a>绑核设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在配置文件中修改copies和thread以及相应的绑核</span></span><br><span class="line"><span class="comment"># 通过taskset numactl做绑核设置，单核不做绑核会一直换核心</span></span><br><span class="line"><span class="comment"># 测试指令前加taskset -c CPU核心数：</span></span><br><span class="line">taskset -c 5 runcpu --config=test.cfg --tune=base --iterations=1 --threads=1 600.perlbench_s 602.gcc_s 605.mcf_s 620.omnetpp_s 623.xalancbmk_s 625.x264_s 631.deepsjeng_s 641.leela_s 648.exchange2_s 657.xz_s</span><br><span class="line"><span class="comment"># numactl -C：用于指定要绑定的 CPU 核心编号: 测试指令前加numactl -c CPU核心数</span></span><br><span class="line">yum install numactl -y</span><br><span class="line">dmesg | grep -i numa</span><br><span class="line"><span class="comment"># 查看输出结果： 如果输出结果为： No NUMA configuration found 说明numa为disable，如果不是上面的内容说明numa为enable</span></span><br><span class="line"><span class="comment"># 测试指令前加numactl -c CPU核心数:</span></span><br></pre></td></tr></table></figure><h3 id="编译参数优化"><a href="#编译参数优化" class="headerlink" title="编译参数优化"></a>编译参数优化</h3><p>如下为SPECcpu2017 Rate FP的优化参数： OPTIMIZE &#x3D; -Ofast -g -pipe -mcpu&#x3D;cortex-a72+crypto+crc -march&#x3D;armv8-a+crypto+crc -funroll-loops Int和fp的编译参数不一样，具体参考cfg附件内相关部分内容</p><h3 id="透明大页"><a href="#透明大页" class="headerlink" title="透明大页"></a>透明大页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行SpeedFp的时候需要设置以下3个变量，关闭THP透传大页后再运行，以优化性能</span></span><br><span class="line"><span class="built_in">export</span> OMP_STACKSIZE=1G</span><br><span class="line"><span class="built_in">export</span> OMP_WAIT_POLICY=active</span><br><span class="line"><span class="built_in">export</span> OMP_PROC_BIND=<span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure><h2 id="国内外CPU技术发展趋势"><a href="#国内外CPU技术发展趋势" class="headerlink" title="国内外CPU技术发展趋势"></a>国内外CPU技术发展趋势</h2><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/N8lYbFoa4o4qVxxmWgFcvicqn1b.png" src-width="2560" src-height="1440" align="center"/><hr><h2 id="📚-参考资料"><a href="#📚-参考资料" class="headerlink" title="📚 参考资料"></a>📚 参考资料</h2><ul><li><a href="https://www.intel.com/content/www/us/en/products/details/processors/xeon.html">Intel Xeon官方文档</a></li><li><a href="https://www.amd.com/en/processors/epyc">AMD EPYC官方文</a></li><li><a href="https://www.nextplatform.com/2021/04/19/deep-dive-into-intels-ice-lake-xeon-sp-architecture/">深入了解intel icelake架构</a></li><li><a href="https://www.intel.com/content/www/us/en/developer/articles/technical/fourth-generation-xeon-scalable-family-overview.html">The 4th Gen Intel® Xeon® Scalable处理概览</a></li><li><a href="https://mp.weixin.qq.com/s/s321GegSdIB8dSa9StOYKg">英特尔6代cpu介绍</a></li></ul>]]></content>
    
    
    <summary type="html">本文系统讲解服务器CPU的核心知识，涵盖基本概念（控制单元/ALU/寄存器）、关键性能参数（主频/核心数/缓存/架构/NUMA等）、多核与互联技术（UPI/xGMI）、型号解析（Intel Xeon/AMD EPYC）、性能测试方法（speccpu/UnixBench/SuperPI）及调优策略（BIOS设置/OS配置/绑核优化），并补充国产CPU（海光/飞腾/龙芯等）发展与认证信息，是服务器CPU知识的综合性手册。</summary>
    
    
    
    <category term="服务器硬件" scheme="https://crayon.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="服务器CPU" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8CPU/"/>
    
    <category term="cpu架构" scheme="https://crayon.github.io/tags/cpu%E6%9E%B6%E6%9E%84/"/>
    
    <category term="cpu性能参数" scheme="https://crayon.github.io/tags/cpu%E6%80%A7%E8%83%BD%E5%8F%82%E6%95%B0/"/>
    
    <category term="服务器硬件" scheme="https://crayon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="cpu测试调优" scheme="https://crayon.github.io/tags/cpu%E6%B5%8B%E8%AF%95%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>lspci命令使用和解析</title>
    <link href="https://crayon.github.io/2025/05/26/lspci%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A7%A3%E6%9E%90/"/>
    <id>https://crayon.github.io/2025/05/26/lspci%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A7%A3%E6%9E%90/</id>
    <published>2025-05-26T06:18:00.000Z</published>
    <updated>2025-06-06T04:37:31.673Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：</p><ol><li><a href="https://diego.assencio.com/?index=649b7a71b35fc7ad41e03b6d0e825f07">Interpreting the output of lspci</a></li><li><a href="https://zhuanlan.zhihu.com/p/26172972">深入PCI与PCIe之一：硬件篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/26244141">深入PCI与PCIe之二：软件篇</a></li><li><a href="https://blog.csdn.net/weixin_42109053/article/details/124596940">lspci 详解pci拓扑结构与pci树形结构</a></li></ol></blockquote><h1 id="lspci命令使用和解析"><a href="#lspci命令使用和解析" class="headerlink" title="lspci命令使用和解析"></a>lspci命令使用和解析</h1><p>lspci在linux系统中查看PCI总线上连接设备信息的工具。一些常用的参数</p><ul><li>–v：显示详细信息</li><li>–s：指定设备的PCI地址</li><li>–n：显示设备的PCI ID</li><li>–vv：显示更加详细的信息</li></ul><p>常见的应用场景：</p><ol><li>检测PCI设备是否正常工作：lspci命令能列出相关设备信息说明设备已经被识别</li><li>查看硬件配置信息：识别计算机的配置信息来正确的安装和配置相关设备的驱动程序</li><li>查找特定类型的设备：可查找特定类型的设备，列入-l参数列出网络相关的设备</li></ol><p>其他同类型的工具：lshw，hwinfo，lspcmcia</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lspci</span><br><span class="line">02:00.0 Network controller: Intel Corporation Wireless 7265 (rev 59)</span><br><span class="line"></span><br><span class="line">lspci -D</span><br><span class="line">0002:e8:00.0 PCI bridge: ----- Co., Ltd. Device 1610 (rev 01)</span><br><span class="line">0004:48:00.0 PCI bridge: ----- Co., Ltd. Device 1610 (rev 01)</span><br><span class="line">0004:49:00.0 Serial Attached SCSI controller: LSI Logic / Symbios Logic SAS3008 PCI-Express Fusion-MPT SAS-3 (rev 02)</span><br></pre></td></tr></table></figure><p>Bus地址：[00:1c.0] 00表示总线编号（Bus Number），1c表示设备编号（Device Number），0表示功能编号（Function Number），三个编号都是采用16进制表示</p><p>理论上，一个Segment可以有256个Bus，每个Bus可以有32个Device，每个Device可以有8个Function；设备特别多的情况下会存在多个DomainNumber，或者使用lspci -D命令输出会带上DomainNumber</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lspci -nn </span><br><span class="line">00:19.0 Ethernet controller [0200]: Intel Corporation Ethernet Connection (3) I218-LM [8086:15a2] (rev 03)</span><br></pre></td></tr></table></figure><p>[0200]表示当前设备类型DeviceClass，[8086:15a2]表示设备的VendorID和Device<br><code>lspci</code>命令会默认尝试读取<code>/usr/share/hwdata/pci.ids.gz</code>和<code>/usr/share/hwdata/pci.ids</code>文件，利用DeviceClass、VendorID:DeviceID去匹配相应的设备，这个设备清单是由<a href="https://pci-ids.ucw.cz/">https://pci-ids.ucw.cz/</a>维护的，我们也可以直接去网站上去查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lspci -vt</span><br><span class="line">+-[0000:62]-+-00.0  Intel Corporation Device 09a2</span><br><span class="line"> |           +-00.1  Intel Corporation Device 09a4</span><br><span class="line"> |           +-00.2  Intel Corporation Device 09a3</span><br><span class="line"> |           +-00.4  Intel Corporation Device 0998</span><br><span class="line"> |           \-02.0-[63-75]----00.0-[64-75]--+-00.0-[65-6a]----00.0-[66-6a]----10.0-[67-6a]----00.0-[68-6a]--+-00.0-[69]----00.0  NVIDIA Corporation Device 20f3</span><br><span class="line"> |                                           |                                                               \-1f.0-[6a]----00.0  LSI Logic / Symbios Logic Device 00b2</span><br><span class="line"> |                                           +-04.0-[6b-70]----00.0-[6c-70]--+-00.0-[6d-6f]----00.0-[6e-6f]----00.0-[6f]----00.0  NVIDIA Corporation Device 20f3</span><br></pre></td></tr></table></figure><p><code>-v</code>参数会显示设备的供应商和名字，虽然Domain Number都是0000但是设备不一定连接到同一条总线上<br>参考图片：<br><img src="https://cdn.jsdelivr.net/gh/CrayonW/note-gen-image-sync@main/2025-05/a956a466-b17e-4856-b470-717b7e4e38f9.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">lspci -vvv</span><br><span class="line">c0:00.0 Bridge: NVIDIA Corporation Device 1af1 (rev a1)</span><br><span class="line">Subsystem: NVIDIA Corporation Device 13b8</span><br><span class="line">Physical Slot: 1</span><br><span class="line">Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr+ Stepping- SERR+ FastB2B- DisINTx+</span><br><span class="line">Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-</span><br><span class="line">Latency: 0, Cache Line Size: 32 bytes</span><br><span class="line">Interrupt: pin A routed to IRQ 984</span><br><span class="line">NUMA node: 1</span><br><span class="line">Region 0: Memory at e2000000 (32-bit, non-prefetchable) [size=32M]</span><br><span class="line">Capabilities: [60] Power Management version 3</span><br><span class="line">Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0+,D1-,D2-,D3hot+,D3cold-)</span><br><span class="line">Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-</span><br><span class="line">Capabilities: [68] MSI: Enable+ Count=1/1 Maskable- 64bit+</span><br><span class="line">Address: 00000000fee01a98  Data: 0000</span><br><span class="line">Capabilities: [78] Express (v2) Endpoint, MSI 00</span><br><span class="line">DevCap:MaxPayload 256 bytes, PhantFunc 0, Latency L0s unlimited, L1 &lt;64us</span><br><span class="line">ExtTag+ AttnBtn- AttnInd- PwrInd- RBE+ FLReset- SlotPowerLimit 25.000W</span><br><span class="line">DevCtl:Report errors: Correctable- Non-Fatal+ Fatal+ Unsupported-</span><br><span class="line">RlxdOrd+ ExtTag+ PhantFunc- AuxPwr- NoSnoop+</span><br><span class="line">MaxPayload 256 bytes, MaxReadReq 4096 bytes</span><br><span class="line">DevSta:CorrErr- UncorrErr- FatalErr- UnsuppReq- AuxPwr- TransPend-</span><br><span class="line">LnkCap:Port #0, Speed 8GT/s, Width x2, ASPM not supported, Exit Latency L0s unlimited, L1 &lt;4us</span><br><span class="line">ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+</span><br><span class="line">LnkCtl:ASPM Disabled; RCB 64 bytes Disabled- CommClk-</span><br><span class="line">ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-</span><br><span class="line">LnkSta:Speed 8GT/s, Width x2, TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-</span><br><span class="line">DevCap2: Completion Timeout: Range AB, TimeoutDis+, LTR+, OBFF Via message</span><br><span class="line">DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis-, LTR-, OBFF Disabled</span><br><span class="line">LnkCtl2: Target Link Speed: 8GT/s, EnterCompliance- SpeedDis-</span><br><span class="line"> Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-</span><br><span class="line"> Compliance De-emphasis: -6dB</span><br><span class="line">LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete+, EqualizationPhase1+</span><br><span class="line"> EqualizationPhase2+, EqualizationPhase3+, LinkEqualizationRequest-</span><br><span class="line">Capabilities: [100 v1] Virtual Channel</span><br><span class="line">Caps:LPEVC=0 RefClk=100ns PATEntryBits=1</span><br><span class="line">Arb:Fixed- WRR32- WRR64- WRR128-</span><br><span class="line">Ctrl:ArbSelect=Fixed</span><br><span class="line">Status:InProgress-</span><br><span class="line">VC0:Caps:PATOffset=00 MaxTimeSlots=1 RejSnoopTrans-</span><br><span class="line">Arb:Fixed- WRR32- WRR64- WRR128- TWRR128- WRR256-</span><br><span class="line">Ctrl:Enable+ ID=0 ArbSelect=Fixed TC/VC=01</span><br><span class="line">Status:NegoPending- InProgress-</span><br><span class="line">Capabilities: [250 v1] Latency Tolerance Reporting</span><br><span class="line">Max snoop latency: 0ns</span><br><span class="line">Max no snoop latency: 0ns</span><br><span class="line">Capabilities: [128 v1] Power Budgeting &lt;?&gt;</span><br><span class="line">Capabilities: [420 v2] Advanced Error Reporting</span><br><span class="line">UESta:DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-</span><br><span class="line">UEMsk:DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq+ ACSViol-</span><br><span class="line">UESvrt:DLP+ SDES+ TLP+ FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-</span><br><span class="line">CESta:RxErr- BadTLP- BadDLLP- Rollover- Timeout- NonFatalErr-</span><br><span class="line">CEMsk:RxErr+ BadTLP+ BadDLLP+ Rollover+ Timeout+ NonFatalErr+</span><br><span class="line">AERCap:First Error Pointer: 00, GenCap- CGenEn- ChkCap- ChkEn-</span><br><span class="line">Capabilities: [600 v1] Vendor Specific Information: ID=0001 Rev=1 Len=024 &lt;?&gt;</span><br><span class="line">Capabilities: [900 v1] #19</span><br><span class="line">Capabilities: [bb0 v1] #15</span><br><span class="line">Kernel driver in use: nvidia-nvswitch</span><br><span class="line">Kernel modules: nvidia_drm, nvidia</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -xxx展示pci设备的配置空间，十六进制输出</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍Linux系统中 lspci 命令的使用与解析，涵盖常用参数（-v/-n等）、应用场景（设备检测、配置查看），解析总线地址、设备类型及VendorID等输出信息，并附多命令示例，助用户掌握PCI设备信息查询方法。</summary>
    
    
    
    <category term="linux" scheme="https://crayon.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://crayon.github.io/tags/linux/"/>
    
    <category term="命令" scheme="https://crayon.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="lspci" scheme="https://crayon.github.io/tags/lspci/"/>
    
  </entry>
  
</feed>
